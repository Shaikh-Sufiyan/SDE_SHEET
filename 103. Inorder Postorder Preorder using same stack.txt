/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    class Pair {
        TreeNode node;
        int num;
        Pair() {
            
        }
        Pair(TreeNode node, int num) {
            this.node = node;
            this.num = num;
        }
    }
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> pre = new ArrayList<>();
        List<Integer> post = new ArrayList<>();
        List<Integer> in = new ArrayList<>();
        if(root == null)
            return post;
        Stack<Pair> stack = new Stack<>();
        stack.push(new Pair(root, 1));
        while(!stack.isEmpty()) {
            Pair current = stack.pop();
            if(current.num == 1) {
                pre.add(current.node.val);
                current.num++;
                stack.push(current);
                if(current.node.left != null)
                    stack.push(new Pair(current.node.left, 1));
            }
            else if(current.num == 2) {
                in.add(current.node.val);
                current.num++;
                stack.push(current);
                if(current.node.right != null)
                    stack.push(new Pair(current.node.right, 1));
            }
            else 
                post.add(current.node.val);
        }
        return post;
    }
}