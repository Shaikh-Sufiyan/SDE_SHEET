class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static class Pair{
        int dist;
        int node;
        public Pair(int node, int dist) {
            this.node = node;
            this.dist = dist;
        }
        
    }
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        PriorityQueue<Pair> q = new PriorityQueue<>((a,b) -> a.dist - b.dist);
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[S] = 0;
        q.offer(new Pair(S, 0));
        while(!q.isEmpty()) {
            Pair current = q.poll();
            int node = current.node;
            int node_dist = current.dist;
            for(ArrayList<Integer> list : adj.get(node)) {
                if(dist[list.get(0)] > node_dist + list.get(1)) {
                    dist[list.get(0)] = node_dist + list.get(1);
                    q.offer(new Pair(list.get(0), dist[list.get(0)]));
                }
            }
                
        }
        return dist;
    }
}

//TC : O(VlogV);
//SC : O(V)

