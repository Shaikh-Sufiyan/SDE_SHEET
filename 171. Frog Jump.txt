/*
Memoization(Top Down)
TC : O(N)
SC : O(N)(rescursion_stack) + O(N)(dp) = O(N)
*/
import java.util.*;
public class Solution {
    public static int frogJump(int n, int heights[]) {
		int[] dp = new int[n];
        Arrays.fill(dp, -1);
        return calculateEnergy(n - 1, dp, heights); // n-1 because only n steps from 0 based indexing
    }
	
    public static int calculateEnergy(int i, int[] dp, int[] heights) {
        if(i == 0)
            return 0;
        if(dp[i] != -1)
            return dp[i];
        int left = calculateEnergy(i - 1, dp, heights) + Math.abs(heights[i] - heights[i - 1]);
        int right = i > 1 ? calculateEnergy(i - 2, dp, heights) + Math.abs(heights[i] - heights[i - 2]) : Integer.MAX_VALUE;
        return dp[i] = Math.min(left, right);
    }
}


/*
Tabulation(Bottom Up)
TC : O(N)
SC : O(N)(dp) = O(N)
*/
public class Solution {
    public static int frogJump(int n, int heights[]) {
		int[] dp = new int[n];
        dp[0] = 0;
        for(int i = 1; i < n; i++) {
            int left = dp[i - 1] + Math.abs(heights[i] - heights[i - 1]);
            int right = i > 1 ? dp[i - 2] + Math.abs(heights[i] - heights[i - 2]) : Integer.MAX_VALUE;
            dp[i] = Math.min(left, right);
        }
        return dp[n - 1];
    }

}


/*
Space Optimization
TC : O(N)
SC : O(1)
*/

public class Solution {
    public static int frogJump(int n, int heights[]) {
	int prev = 0;
        int prev2 = 0;
        int ans;
        for(int i = 1; i < n; i++) {
            int left = prev + Math.abs(heights[i] - heights[i - 1]);
            int right = i > 1 ? prev2 + Math.abs(heights[i] - heights[i - 2]) : Integer.MAX_VALUE;
            ans = Math.min(left, right);
            prev2 = prev;
            prev = ans;
        }
        return prev;
    }

}