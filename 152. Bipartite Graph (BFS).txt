class Solution
{
    public boolean isBipartite(int V, ArrayList<ArrayList<Integer>>adj)
    {
        int[] color = new int[V];
        Arrays.fill(color, -1);
        for(int i = 0; i < V; i++) {
            if(color[i] == -1) {
                if(!checkBipartite(i, color, adj)) {
                    return false;
                }
            }
        }
        return true;
    }
    
    public static boolean checkBipartite(int i, int[] color, ArrayList<ArrayList<Integer>> adj) {
        Queue<Integer> q = new LinkedList<>();
        q.offer(i);
        color[i] = 1;
        while(!q.isEmpty()) {
            int current = q.poll();
            for(int j : adj.get(current)) {
                if(color[j] == -1) {
                    color[j] = color[current] ^ 1;
                    q.offer(j);
                }
                else if(color[j] == color[current]) {
                    return false;
                }
            }
        }
        return true;
    }
}

//TC : O(V + E)
//SC : O(V)(Queue) + O(V)(color) = O(V)