/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    class Tuple {
        int col;
        int row;
        TreeNode node;
        Tuple(int col, int row, TreeNode node) {
            this.col = col;
            this.row = row;
            this.node = node;
        }
    }
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if(root == null)
            return result;
        TreeMap<Integer, TreeMap<Integer, PriorityQueue<Integer>>> map = new TreeMap<>();
        Queue<Tuple> queue = new LinkedList<>();
        queue.offer(new Tuple(0, 0, root));
        while(!queue.isEmpty()) {
            Tuple tuple = queue.poll();
            TreeNode current = tuple.node;
            int col = tuple.col;
            int row = tuple.row;
            if(current.left != null)
                queue.offer(new Tuple(col - 1, row + 1, current.left));
            if(current.right != null)
                queue.offer(new Tuple(col + 1, row + 1, current.right));
            if(!map.containsKey(col))
                map.put(col, new TreeMap<>());
            if(!map.get(col).containsKey(row))
                map.get(col).put(row, new PriorityQueue<>());
            map.get(col).get(row).offer(current.val);
        }
        System.out.println(map);
        for(TreeMap<Integer, PriorityQueue<Integer>> x : map.values()) {
            result.add(new ArrayList<>());
            for(PriorityQueue<Integer> y : x.values()) {
                while(!y.isEmpty())
                    result.get(result.size() - 1).add(y.poll());
            } 
        }
        return result;
        
    }
}