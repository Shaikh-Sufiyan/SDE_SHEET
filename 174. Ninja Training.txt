//Memoization
//TC : O((N * 4)(input_szie) * 3(task_loop)) = O(N)
//SC : O(N * 4) + O(N)

import java.util.*;
public class Solution {
    public static int ninjaTraining(int n, int points[][]) {
		int[][] dp = new int[n][4];
        for(int[] i : dp)
        	Arrays.fill(i, -1);
        return calculate(n - 1, 3, points, dp);
    }

    public static int calculate(int day, int last, int points[][], int[][] dp) {
        if(dp[day][last] != -1)
            return dp[day][last];
        if(day == 0) {
            int max = 0;
            for(int task = 0; task < 3; task++) {
				if(task != last) {
                    max = Math.max(points[0][task], max);
                }
            }
            return dp[0][last] = max;
        }
        int max = 0;
        for(int task = 0; task < 3; task++) {
            if(task != last) {
                int point = points[day][task] + calculate(day - 1, task, points, dp);
                max = Math.max(max, point);
            }
        }
        return dp[day][last] = max; //last = activity perform on last day(adjacent day passign through function call)
    }

}


//Tabulation
//TC : O(N * 4 * 3)
//SC : O(N * 4)

public class Solution {
    public static int ninjaTraining(int n, int points[][]) {
		int[][] dp = new int[n][4]; //0->1st activity,....,3->No activity
        dp[0][0] = Math.max(points[0][1], points[0][2]);//0,0 -> 0th day and on adjacent day 0th activity done, hence on current day can take ma of 1st and 2nd
        dp[0][1] = Math.max(points[0][0], points[0][2]);
        dp[0][2] = Math.max(points[0][0], points[0][1]);
        dp[0][3] = Math.max(points[0][0], Math.max(points[0][1], points[0][2]));
        for(int day = 1; day < n; day++) {
            for(int last = 0; last < 4; last++) {
                dp[day][last] = 0; //directly using array value instead of using max variable
                for(int task = 0; task < 3; task++) {
                    if(task != last) {
                        int point = points[day][task] + dp[day - 1][task];
                    	dp[day][last] = Math.max(dp[day][last], point);
                    }
                }
            }
        }
        return dp[n - 1][3];
    }

}


//Space Optimization
//SC : O(4)

import java.util.*;
public class Solution {
    public static int ninjaTraining(int n, int points[][]) {
		int[] dp = new int[4]; //0->1st activity,....,3->No activity
        dp[0] = Math.max(points[0][1], points[0][2]);//0,0 -> 0th day and on adjacent day 0th activity done, hence on current day can take ma of 1st and 2nd
        dp[1] = Math.max(points[0][0], points[0][2]);
        dp[2] = Math.max(points[0][0], points[0][1]);
        dp[3] = Math.max(points[0][0], Math.max(points[0][1], points[0][2]));
        for(int day = 1; day < n; day++) {
            int[] temp = new int[4];
            for(int last = 0; last < 4; last++) {
                temp[last] = 0; //directly using array value instead of using max variable
                for(int task = 0; task < 3; task++) {
                    if(task != last) {
                        int point = points[day][task] + dp[task];
                    	temp[last] = Math.max(temp[last], point);
                    }
                }
            }
            dp = temp.clone();//copy temp to dp
        }
        return dp[3];
    }

}