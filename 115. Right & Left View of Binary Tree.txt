RightView :

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        rightView(root, list, 0);
        return list;
    }
    
    public void rightView(TreeNode root, List<Integer> list, int level) {
        if(root != null) {
            if(level == list.size())
                list.add(root.val);
            rightView(root.right, list, level + 1);
            rightView(root.left, list, level + 1);
        }
    }
}

LeftView :

/* A Binary Tree node
class Node
{
    int data;
    Node left, right;

    Node(int item)
    {
        data = item;
        left = right = null;
    }
}*/
class Tree
{
    //Function to return list containing elements of left view of binary tree.
    ArrayList<Integer> leftView(Node root)
    {
        ArrayList<Integer> result = new ArrayList<>();
        leftView(root, result, 0);
        return result;
    }
    
    public void leftView(Node root, ArrayList<Integer> result, int level) {
        if(root != null) {
            if(result.size() == level)
                result.add(root.data);
            leftView(root.left, result, level + 1);
            leftView(root.right, result, level + 1);
        }
    }
}