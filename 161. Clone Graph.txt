/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

//DFS :

class Solution {
    public Node cloneGraph(Node node) {
        if(node == null)
            return null;
        HashMap<Integer, Node> map = new HashMap<>();
        return dfsClone(node, map);
    }
    
    public Node dfsClone(Node node, HashMap<Integer, Node> map) {
        if(map.containsKey(node.val))
            return map.get(node.val);
        Node copy = new Node(node.val);
        map.put(node.val, copy);
        for(Node neighbor : node.neighbors) {
            copy.neighbors.add(dfsClone(neighbor, map));
        }
        return copy;
    }
}

//BFS


class Solution {
    public Node cloneGraph(Node node) {
        if(node == null)
            return null;
        HashMap<Integer, Node> map = new HashMap<>();
        Queue<Node> q = new LinkedList<>();
        q.offer(node);
        map.put(node.val, new Node(node.val));
        while(!q.isEmpty()) {
            Node current = q.poll();
            for(Node neighbor : current.neighbors) {
                if(!map.containsKey(neighbor.val)) {
                    map.put(neighbor.val, new Node(neighbor.val));
                    q.offer(neighbor);
                }
                map.get(current.val).neighbors.add(map.get(neighbor.val));
            }
        }
        return map.get(node.val);
    }
}

//TC : O(V + E)
//SC : O(V + E)