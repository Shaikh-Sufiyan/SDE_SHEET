public class Solution {
	public static long houseRobber(int[] valueInHouse) {
        int n = valueInHouse.length;
        if(n == 1)
            return valueInHouse[0];
        int[] leavingFirst = new int[ n - 1];
        int[] leavingLast = new int[ n - 1];
        for(int i = 0; i < n - 1; i++) {
            leavingLast[i] = valueInHouse[i];
        }
        for(int i = 1; i < n; i++) {
			leavingFirst[i - 1] = valueInHouse[i];
        }
        return Math.max(calculate(leavingFirst), calculate(leavingLast));
	}	
    
    public static long calculate(int[] arr) {
        int n = arr.length;
        if(n == 1)
            return arr[0];
        long prev2 = arr[0];
        long prev = Math.max(arr[0], arr[1]);
        long ans;
        for(int i = 2; i < n; i++) {
            long include_adj = arr[i] + prev2;
            long exclude_adj = prev;
			ans = Math.max(include_adj, exclude_adj);
            prev2 = prev;
            prev = ans;
        }
        return prev;
	}
}

//TC : O(N)
//SC : O(N)