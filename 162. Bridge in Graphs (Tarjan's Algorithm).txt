//LeetCode 1192
// Bridge : Edge if remove disconnect the graph or split the graph in more components
class Solution {
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        List<List<Integer>> result = new ArrayList<>();
        List<List<Integer>> adj = new ArrayList<>();
        boolean[] visited = new boolean[n];
        int[] tin = new int[n];
        int[] low = new int[n];
        int timer = 0;
        for(int i = 0; i < n; i++)
            adj.add(new ArrayList<>());
        buildAdjList(adj, connections);
        findCriticalConnections(0, -1, visited, tin, low, timer, adj, result);
        return result;
    }
    
    public void findCriticalConnections(int node, int parent, boolean[] visited, int[] tin, int[] low, int timer, List<List<Integer>> adj, List<List<Integer>> result) {
        visited[node] = true;
        tin[node] = low[node] = timer++;
        for(int j : adj.get(node)) {
            if(j == parent)
                continue;
            if(!visited[j]) {
                findCriticalConnections(j, node, visited, tin, low, timer, adj, result);
                low[node] = Math.min(low[node], low[j]);
                if(low[j] > tin[node]) { //j can only be reached through this node, cannot be reached through any other node or any ancestore node
                    List<Integer> list = new ArrayList<>();
                    list.add(j);
                    list.add(node);
                    result.add(list);
                }
            }
            else {
                low[node] = Math.min(low[node], tin[j]);
            }
        }
    }
    
    public void buildAdjList(List<List<Integer>> adj, List<List<Integer>> connections) {
        for(List<Integer> list : connections) {
            int u = list.get(0);
            int v = list.get(1);
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
    }
}

//TC : O(V + E)
//SC : O(V + E)