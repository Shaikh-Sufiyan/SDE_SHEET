class Solution
{
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        int[] result = new int[V];
        Stack<Integer> stack = new Stack<>();
        boolean[] visited = new boolean[V];
        for(int i = 0; i < V; i++) {
            if(!visited[i]) {
                dfs(i, visited, stack, adj);
            }
        }
        int i = 0;
        while(!stack.isEmpty()) {
            result[i++] = stack.pop();
        }
        return result;
    }
    
    public static void dfs(int i, boolean[] visited, Stack<Integer> stack, ArrayList<ArrayList<Integer>> adj) {
        visited[i] = true;
        for(int j : adj.get(i)) {
            if(!visited[j]) {
                dfs(j, visited, stack, adj);
            }
        }
        stack.push(i);
    }
}

//TC : O(V + E)
//SC : O(V)(stack) + O(V)(visited) + O(V)(recursion stack) = O(V)