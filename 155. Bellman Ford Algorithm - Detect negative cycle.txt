class Solution
{
    public int isNegativeWeightCycle(int n, int[][] edges)
    {
        int[] dist = new int[n];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[0] = 0;
        
        //Relax N-1 time to get shortest distance
        for(int i = 0; i < n; i++) {
            for(int[] current : edges) {
                int u = current[0];
                int v = current[1];
                int weight = current[2];
                if(dist[u] != Integer.MAX_VALUE && dist[v] > dist[u] + weight) {
                    dist[v] = dist[u] + weight;
                }
            }
        }
        
        //If nodes get relaxed in Nth iteration then contains cycle
        for(int[] current : edges) {
                int u = current[0];
                int v = current[1];
                int weight = current[2];
                if(dist[u] != Integer.MAX_VALUE && dist[v] > dist[u] + weight) {
                    return 1;
                }
            }
        return 0;
    }
}

//TC : O(VE)
//SC : O(V)