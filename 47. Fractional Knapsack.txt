/*
class Item {
    int value, weight;
    Item(int x, int y){
        this.value = x;
        this.weight = y;
    }
}
*/

class Solution
{
    //Function to get the maximum total value in the knapsack.
    
    static class itemComparator implements Comparator<Item> {
        public int compare(Item t1, Item t2) {
            double val1 = (double)t1.value/(double)t1.weight;
            double val2 = (double)t2.value/(double)t2.weight;
            if(val1 > val2)
                return -1;
            else if(val1 < val2)
                return 1;
            return 1;
        }
    }
    double fractionalKnapsack(int W, Item arr[], int n) 
    {
        double res = 0;
        itemComparator ic = new itemComparator();
        Arrays.sort(arr,ic);
        int current_weight = 0;
        for(int i = 0; i < n; i++) {
            if(current_weight + arr[i].weight <= W) {
                current_weight += arr[i].weight;
                res += arr[i].value;
            }
            else {
                double remain = (double)arr[i].value/(double)arr[i].weight;
                res += (W - current_weight) * remain;
                break;
            }
        }
        return res;
    }
}