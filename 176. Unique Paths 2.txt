/*
Memoization :
TC : O(n * m)
SC : ((n - 1) + (m - 1))(RecStack(longest Path)) + O(n * m) (dp)
*/
import java.util.*;
public class Solution {
    static int mazeObstacles(int n, int m, ArrayList<ArrayList<Integer>> mat) {
        int[][] dp = new int[n][m];
        for(int[] i : dp)
            Arrays.fill(i, -2);
        return countPath(n - 1, m - 1, mat, dp);
    }
    
    public static int countPath(int i, int j, ArrayList<ArrayList<Integer>> mat, int[][] dp) {
        if(i == 0 && j == 0)
            return 1;
        if(i < 0 || j < 0 || mat.get(i).get(j) == -1)
            return 0;
        if(dp[i][j] != -2)
            return dp[i][j];
        int up = countPath(i - 1, j, mat, dp);
        int left = countPath(i, j - 1, mat, dp);
        return dp[i][j] = (up + left) % 1000000007;
    }

}

/*
Tabulation
TC : O(n * m)
SC : O(n * m) (dp)
*/

import java.util.*;
public class Solution {
    static int mazeObstacles(int n, int m, ArrayList<ArrayList<Integer>> mat) {
        int[][] dp = new int[n][m];
        int mod = (int)(1e9 + 7);
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(mat.get(i).get(j) == -1) 
                    dp[i][j] = 0;
                else if(i == 0 && j == 0)
                    dp[i][j] = 1;
                else {
                    int up = 0;
                    int left = 0;
                    if(i > 0)
                        up = dp[i - 1][j];
                    if(j > 0)
                        left = dp[i][j - 1];
                    dp[i][j] = (up + left) % mod;
                }
            }
        }
        return dp[n - 1][m - 1];
    
    }

}

/*
Space Optimization
TC : O(n * m)
SC : O(m) (dp)
*/

import java.util.*;
public class Solution {
    static int mazeObstacles(int n, int m, ArrayList<ArrayList<Integer>> mat) {
        int[] dp = new int[m];
        int mod = (int)(1e9 + 7);
        for(int i = 0; i < n; i++) {
            int[] temp = new int[m];
            for(int j = 0; j < m; j++) {
                if(mat.get(i).get(j) == -1) 
                    temp[j] = 0;
                else if(i == 0 && j == 0) //here using && because of obstacle, we cannot assign directly 1 to first row or col because if obstacle is there then it is unreachable
                    temp[j] = 1;
                else {
                    int up = 0;
                    int left = 0;
                    if(i > 0)
                        up = dp[j];
                    if(j > 0)
                        left = temp[j - 1];
                    temp[j] = (up + left) % mod;
                }
            }
            dp = temp.clone();
        }
        return dp[m - 1];
    
    }

}
