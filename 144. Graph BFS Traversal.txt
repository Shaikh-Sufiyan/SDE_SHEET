Connected Component Graph : Single Component 

class Solution {
    // Function to return Breadth First Traversal of given graph.
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] visited = new boolean[V];
        Arrays.fill(visited, false);
        ArrayList<Integer> result = new ArrayList<>();
        //for(int i = 0; i < V; i++) {
            //if(!visited[i]) {
                bfs(0, visited, adj, result);
            //}
        //}
        return result;
    }
    
    public static void bfs(int i, boolean[] visited, ArrayList<ArrayList<Integer>> adj, ArrayList<Integer> result) {
        visited[i] = true;
        Queue<Integer> q = new LinkedList<>();
        q.offer(i);
        while(!q.isEmpty()) {
            int current = q.poll();
            result.add(current);
            for(int j : adj.get(current)) {
                if(!visited[j]) {
                    visited[j] = true;
                    q.offer(j);
                }
            }
        }
    }
}

Not Connected Component Graph : Multiple Component

class Solution {
    // Function to return Breadth First Traversal of given graph.
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] visited = new boolean[V];
        Arrays.fill(visited, false);
        ArrayList<Integer> result = new ArrayList<>();
        for(int i = 0; i < V; i++) {
            if(!visited[i]) {
                bfs(i, visited, adj, result);
            }
        }
        return result;
    }
    
    public static void bfs(int i, boolean[] visited, ArrayList<ArrayList<Integer>> adj, ArrayList<Integer> result) {
        visited[i] = true;
        Queue<Integer> q = new LinkedList<>();
        q.offer(i);
        while(!q.isEmpty()) {
            int current = q.poll();
            result.add(current);
            for(int j : adj.get(current)) {
                if(!visited[j]) {
                    visited[j] = true;
                    q.offer(j);
                }
            }
        }
    }
}