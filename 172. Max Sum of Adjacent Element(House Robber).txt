/*
Memoization (Top Down)
TC : O(N)
SC : O(N)(recursion_stack) + O(N)(dp) = O(N)
*/

import java.util.*;
public class Solution {
	public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
        int n = nums.size();
        int[] dp = new int[n];
        Arrays.fill(dp, -1);
		return calculate(n - 1, dp, nums);
	}
    
    public static int calculate(int n, int[] dp, ArrayList<Integer> nums) {
        if(n == 0) 
            return nums.get(0);
        if(n < 0)
            return 0;
        if(dp[n] != -1)
            return dp[n];
        int include_adj = nums.get(n) + calculate(n - 2, dp, nums);
        int exclude_adj = calculate(n - 1, dp, nums);
        return dp[n] = Math.max(include_adj, exclude_adj);
    }
}

/*
Tabulation(Bottom Up)
TC : O(N)
SC :O(N)
*/

import java.util.*;
public class Solution {
	public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
		int n = nums.size();
        if(n == 1)
            return nums.get(0);
        int[] dp = new int[n];
        dp[0] = nums.get(0);
        dp[1] = Math.max(nums.get(0), nums.get(1));
        for(int i = 2; i < n; i++) {
            int include_adj = nums.get(i) + dp[i - 2];
            int exclude_adj = dp[i - 1];
			dp[i] = Math.max(include_adj, exclude_adj);
        }
        return dp[n - 1];
	}
}


/*
Space Optimization
TC : O(N)
SC : O(1)
*/

import java.util.*;
public class Solution {
	public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
		int n = nums.size();
        if(n == 1)
            return nums.get(0);
        int prev2 = nums.get(0);
        int prev = Math.max(nums.get(0), nums.get(1));
        int ans;
        for(int i = 2; i < n; i++) {
            int include_adj = nums.get(i) + prev2;
            int exclude_adj = prev;
			ans = Math.max(include_adj, exclude_adj);
            prev2 = prev;
            prev = ans;
        }
        return prev;
	}
}