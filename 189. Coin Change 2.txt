/*
Memoization
TC : O(n * target)
SC : O(n * target) + O(n)(RecStack)
*/

import java.util.*;
public class Solution {

	public static long countWaysToMakeChange(int denominations[], int value){
        int n = denominations.length;
        long[][] dp = new long[n][value + 1];
        for(long[] i : dp)
            Arrays.fill(i, -1);
        return findWays(n - 1, value, denominations, dp);

	}
	
    public static long findWays(int index, int target, int[] arr, long[][] dp) {
        
        if(index == 0) {
            return target % arr[0] == 0 ? 1 : 0;
        }
        if(dp[index][target] != -1)
            return dp[index][target];
        long not_take = findWays(index - 1, target, arr, dp);
        long take = 0;
        if(arr[index] <= target) {
            take = findWays(index, target - arr[index], arr, dp);
        }
        return dp[index][target] = not_take + take;
    }
}

/*
Tabulation
TC : O(n * target)
SC : O(n * target)
*/

import java.util.*;
public class Solution {

	public static long countWaysToMakeChange(int denominations[], int value){
        int n = denominations.length;
        long[][] dp = new long[n][value + 1];
        for(int i = 0; i <= value; i++)
            dp[0][i] = i % denominations[0] == 0 ? 1 : 0;
        for(int index = 1; index < n; index++) {
            for(int target = 0; target <= value; target++) {
                long not_take = dp[index - 1][target];
                long take = 0;
                if(denominations[index] <= target) {
                    take = dp[index][target - denominations[index]];
                }
                dp[index][target] = not_take + take;

            }
        }
        return dp[n - 1][value];

	}
}

/*
Space Optimization
TC : O(n * target)
SC : O(target)
*/

import java.util.*;
public class Solution {

	public static long countWaysToMakeChange(int denominations[], int value){
        int n = denominations.length;
        long[] dp = new long[value + 1];
        for(int i = 0; i <= value; i++)
            dp[i] = i % denominations[0] == 0 ? 1 : 0;
        for(int index = 1; index < n; index++) {
            long[] temp = new long[value + 1];
            for(int target = 0; target <= value; target++) {
                long not_take = dp[target];
                long take = 0;
                if(denominations[index] <= target) {
                    take = temp[target - denominations[index]];
                }
                temp[target] = not_take + take;

            }
            dp = temp.clone();
        }
        return dp[value];

	}
}