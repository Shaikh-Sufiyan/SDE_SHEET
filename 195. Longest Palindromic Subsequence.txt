/* 
Tabulation
TC : O(n * n) + O(n + n) (while loop for building LCS string)
SC : O(n * n) + O(len(LCS))
*/
class Solution {
    public int longestPalindromeSubseq(String s) {
        StringBuilder rev = new StringBuilder(s);
        String reverse = rev.reverse().toString();
        return lcs(s, reverse);
    }
    
    public static int lcs(String s, String t) {
        int n = s.length();
        int m = t.length();
        int[][] dp = new int[n + 1][m + 1];
        for(int index1 = 0; index1 <= n; index1++)
            dp[index1][0] = 0;
        for(int index2 = 0; index2 <= m; index2++)
            dp[0][index2] = 0;
        for(int index1 = 1; index1 <= n; index1++) {
            for(int index2 = 1; index2 <= m; index2++) {
                if(s.charAt(index1 - 1) == t.charAt(index2 - 1))
                    dp[index1][index2] = 1 + dp[index1 -1][index2 - 1];
                else
                    dp[index1][index2] = 0 + Math.max(dp[index1][index2 - 1], dp[index1 - 1][index2]);
            }
        }
        StringBuilder ans = new StringBuilder();
        int i = n;
        int j = m;
        while(i > 0 && j > 0) {
            // char for both string are equal then in dp table they are coming from i - 1, j - 1. row , col respectively
            if(s.charAt(i - 1) == t.charAt(j - 1)) {//1-based indexing, as we have done shifting to make tabulation easy
                ans.append(s.charAt(i - 1));
                i--;
                j--;
            }
            //this is of max condition, if char are not equal they are either coming from [i-1][j] or [i][j-1]. Hence taking same thing
            else if(dp[i][j - 1] > dp[i - 1][j]) {
                j--;
            }
            else {
                i--;
            }
        }
        System.out.println(ans.reverse().toString());
        return dp[n][m];
    }
}