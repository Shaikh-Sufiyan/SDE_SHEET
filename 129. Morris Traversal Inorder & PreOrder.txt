/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

Inoder Traversal : TC : O(n)(amortise), SC : O(1)
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        TreeNode current = root;
        while(current != null) {
            if(current.left == null) {
                result.add(current.val);
                current = current.right;
            }
            else {
                TreeNode left = current.left;
                while(left.right != null && left.right != current) {
                    left = left.right;
                }
                if(left.right == null) {
                    left.right = current;
                    current = current.left;
                }
                else {
                    left.right = null;
                    result.add(current.val);
                    current = current.right;
                }
            }
        }
        return result;
    }
}

Self notes:
In-order Morris Traversal:
ðŸŒ³ 1st case: if left is null, print current node and go right
ðŸŒ³ 2nd case: before going left, make right most node on left subtree connected to current node, then go left
ðŸŒ³ 3rd case: if thread is already pointed to current node, then remove the thread(since thread already present left has been done print root and go to right)


PreOrder Traversal :  TC : O(n)(amortise), SC : O(1)

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        TreeNode current = root;
        while(current != null) {
            if(current.left == null) {
                result.add(current.val);
                current = current.right;
            }
            else {
                TreeNode left = current.left;
                while(left.right != null && left.right != current) {
                    left = left.right;
                }
                if(left.right == null) {
                    left.right = current;
                    result.add(current.val); //before going to left print root as it is preorder
                    current = current.left;
                }
                else {
                    left.right = null;
                    current = current.right;
                }
            }
        }
        return result;
    }
}