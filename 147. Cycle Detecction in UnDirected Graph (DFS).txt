class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] visited = new boolean[V];
        Arrays.fill(visited, false);
        for(int i = 0; i < V; i++) {
            if(!visited[i]) {
                if(hasCycle(i, visited, adj, -1)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    public static boolean hasCycle(int i, boolean[] visited, ArrayList<ArrayList<Integer>> adj, int parent) {
        visited[i] = true;
        for(int j : adj.get(i)) {
            if(!visited[j]) {
                if(hasCycle(j, visited, adj, i)) {
                    return true;
                }
                
            }
            else if(j != parent) {
                return true;
            }
        }
        return false;
    }
}