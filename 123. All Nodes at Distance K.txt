/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        HashMap<TreeNode, TreeNode> map = new HashMap<>();
        findParent(root, map);
        HashMap<TreeNode, Boolean> visited = new HashMap<>();
        int dist = 0;
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(target);
        visited.put(target, true);
        while(!q.isEmpty()) {
            int n = q.size();
            if(dist == k)
                break;
            for(int i = 0; i < n; i++) {
                TreeNode current = q.poll();
                if(current.left != null && visited.get(current.left) == null) {
                    q.offer(current.left);
                    visited.put(current.left, true);
                }
                if(current.right != null && visited.get(current.right) == null) {
                    q.offer(current.right);
                    visited.put(current.right, true);
                }
                if(map.get(current) != null && visited.get(map.get(current)) == null) {
                    q.offer(map.get(current));
                    visited.put(map.get(current), true);
                }
            }
            dist++;
        }
        List<Integer> result = new ArrayList<>();
        while(!q.isEmpty())
            result.add(q.poll().val);
        return result;
    }
    
    public void findParent(TreeNode root, HashMap<TreeNode, TreeNode> map) {
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()) {
            TreeNode current = q.poll();
            if(current.left != null) {
                q.offer(current.left);
                map.put(current.left, current);
            }
            if(current.right != null) {
                q.offer(current.right);
                map.put(current.right, current);
            }
        }
    }
}