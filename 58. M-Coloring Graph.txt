class solve 
{
    //Function to determine if graph can be coloured with at most M colours such
    //that no two adjacent vertices of graph are coloured with same colour.
    public static boolean graphColoring(List<Integer>[] G, int[] color, int i, int C) 
    {
        int n = G.length;
        return solve(G,color,i,C,n);
    }
    
    public static boolean solve(List<Integer>[] G, int[] color, int node, int m, int n) {
        if(node == n)
            return true;
        for(int i = 1; i <= m; i++) {
            if(isValid(G,color,node,i)) {
                color[node] = i;
                if(solve(G,color,node + 1,m,n))
                    return true;
                else
                    color[node] = 0;
            }
        }
        return false;
    }
    
    public static boolean isValid(List<Integer>[] G,int[] color, int node, int col) {
        for(int i : G[node]) {
            if(color[i] == col)
                return false;
        }
        return true;
    } 
}