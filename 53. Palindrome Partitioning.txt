class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> list = new ArrayList<>();
        palindromicString(0, s, new ArrayList<String>(), list);
        return list;
    }
    public void palindromicString(int index, String s, ArrayList<String> ds, List<List<String>> list) {
        if(index == s.length()) {
            list.add(new ArrayList<>(ds));
            return;
        }
        for(int i = index; i < s.length(); i++) {
            if(isPalindrome(s, index, i)) {
                ds.add(s.substring(index, i + 1));
                palindromicString(i + 1, s, ds, list);
                ds.remove(ds.size() - 1);
            }
        }
    }
    
    public boolean isPalindrome(String s, int start, int end) {
        while(start < end) {
            if(s.charAt(start++) != s.charAt(end--))
                return false;
        }
        return true;
    }
}