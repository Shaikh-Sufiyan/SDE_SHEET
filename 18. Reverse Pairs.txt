class Solution {
    public int reversePairs(int[] nums) {
        return mergeSort(nums,0,nums.length - 1);
    }
    public static int mergeSort(int[] nums, int low, int high) {
        int res = 0;
        if(low < high) {
            int mid = low + (high - low)/2;
            res += mergeSort(nums,low,mid);
            res += mergeSort(nums,mid + 1, high);
            res += merge(nums,low,mid,high);
        }
        return res;
    }
    public static int merge(int[] nums, int low, int mid, int high) {
        int n1 = mid - low + 1;
        int n2 = high - mid;
        int res = 0;
        int[] left = new int[n1];
        int[] right = new int[n2];
        for(int i = 0; i < n1; i++) {
            left[i] = nums[i + low];
        }
        for(int i = 0; i < n2; i++) {
            right[i] = nums[i + mid + 1];
        }
        int j = mid + 1;
        for(int i = low; i <= mid; i++) {
            while(j <= high && nums[i] > 2 * (long)nums[j])
                j++;
            res += (j - (mid + 1));
        }
        int k = low;
        int i = 0;
        j = 0;
        while(i < n1 && j < n2) {
            if(left[i] <= right[j]) {
                nums[k++] = left[i++];
            }
            else {
                nums[k++] = right[j++];
            }
        }
        while(i < n1)
            nums[k++] = left[i++];
        while(j < n2)
            nums[k++] = right[j++];
        return res;
    }
}