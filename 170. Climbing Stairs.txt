/*
Memoization(top down)
TC : O(N)
SC : O(N)(dp) + O(N)(recursion_stack) = O(N)
*/
class Solution {
    public int climbStairs(int n) {
        int[] dp = new int[n + 2];
        Arrays.fill(dp, -1);
        return fibo(dp, n + 1);
    }
    
    public int fibo(int[] dp, int n) {
        if(n <= 1)
            return n;
        if(dp[n] != -1)
            return dp[n];
        return dp[n] = fibo(dp, n - 2) + fibo(dp, n - 1);
    }
}





/*
Tabulation(bottom up)
TC : O(N)
SC : O(N)
*/
class Solution {
    public int climbStairs(int n) {
        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = 1;
        for(int i = 2; i <= n; i++) {
            dp[i] = dp[i - 2] + dp[i - 1];
        }
        return dp[n];
    }
}





/*
Space Optimization
TC : O(N)
SC : O(1)
*/
class Solution {
    public int climbStairs(int n) {
        int n1 = 1;
        int n2 = 1;
        for(int i = 2; i <= n; i++) {
            int res = n1 + n2;
            n1 = n2;
            n2 = res;
        }
        return n2;
    }
}