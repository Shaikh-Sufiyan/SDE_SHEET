class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] visited = new boolean[V];
        boolean[] dfsVisited = new boolean[V];
        Arrays.fill(visited, false);
        Arrays.fill(dfsVisited, false);
        for(int i = 0; i < V; i++) {
            if(!visited[i]) {
                if(hasCycle(i, visited, dfsVisited, adj)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    public static boolean hasCycle(int i, boolean[] visited, boolean[] dfsVisited, ArrayList<ArrayList<Integer>> adj) {
        visited[i] = true;
        dfsVisited[i] = true;
        for(int j : adj.get(i)) {
            if(!visited[j]) {
                if(hasCycle(j, visited, dfsVisited, adj)) {
                    return true;
                }
            }
            else if(dfsVisited[j]) {
                return true;
            }
        }
        dfsVisited[i] = false;
        return false;
    }
}

TC : O(V + E)
SC : O(2V) == O(V)