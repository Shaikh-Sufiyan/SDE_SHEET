/************************************************************

    Following is the Binary Tree node structure:
    
   class TreeNode {
	    int data;
	    TreeNode left;
	    TreeNode right;

	    TreeNode(int data) {
		    this.data = data;
		    this.left = null;
		    this.right = null;
	    }

    }

************************************************************/

import java.util.ArrayList;

public class Solution {
	public static ArrayList<Integer> traverseBoundary(TreeNode root){
		ArrayList<Integer> res = new ArrayList<>();
        if(!isLeaf(root)) {
            res.add(root.data);
            //return res;
        }
        addLeftBoundary(root, res);
        addLeaf(root, res);
        addRightBoundary(root, res);
        return res;
	}
    
    public static void addLeftBoundary(TreeNode root, ArrayList<Integer> res) {
        TreeNode current = root.left;
        while(current != null) {
            if(!isLeaf(current))
                res.add(current.data);
            if(current.left != null)
                current = current.left;
            else
                current = current.right;
        }
    }
    
    public static void addRightBoundary(TreeNode root, ArrayList<Integer> res) {
        TreeNode current = root.right;
        int n = res.size();
        while(current != null) {
            if(!isLeaf(current))
                res.add(n, current.data); //to add right boundary in reverse order
            if(current.right != null)
                current = current.right;
            else
                current = current.left;
        }
    }
    
    public static void addLeaf(TreeNode root, ArrayList<Integer> res) {
		if(isLeaf(root)) {
            res.add(root.data);
            return;
        }
        if(root.left != null)
            addLeaf(root.left, res);
        if(root.right != null)
            addLeaf(root.right, res);
    }
    
    public static boolean isLeaf(TreeNode root) {
        return ((root.left == null) && (root.right == null));
    }
    
}