Single Component :

class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        
        boolean[] visited = new boolean[V];
        Arrays.fill(visited, false);
        ArrayList<Integer> result = new ArrayList<>();
        //for(int i = 0; i < V; i++) {
            //if(!visited[i]) {
                dfs(0, visited, adj, result);
            //}
        //}
        return result;
    
    }
    public static void dfs(int i, boolean[] visited, ArrayList<ArrayList<Integer>> adj, ArrayList<Integer> result) {
        visited[i] = true;
        result.add(i);
        for(int j : adj.get(i)) {
            if(!visited[j]) {
                dfs(j, visited, adj, result);
            }
        }
    }
}

Multiple Component :

class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        
        boolean[] visited = new boolean[V];
        Arrays.fill(visited, false);
        ArrayList<Integer> result = new ArrayList<>();
        for(int i = 0; i < V; i++) {
            if(!visited[i]) {
                dfs(i, visited, adj, result);
            }
        }
        return result;
    
    }
    public static void dfs(int i, boolean[] visited, ArrayList<ArrayList<Integer>> adj, ArrayList<Integer> result) {
        visited[i] = true;
        result.add(i);
        for(int j : adj.get(i)) {
            if(!visited[j]) {
                dfs(j, visited, adj, result);
            }
        }
    }
}