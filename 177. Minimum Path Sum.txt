/*
Memoization
TC : O(n * m)
SC : O(n * m) + O((n - 1) + (m - 1))(RecStack - longest path)
*/

import java.util.*;
public class Solution {
    public static int minSumPath(int[][] grid) {
    	int n = grid.length;
        int m = grid[0].length;
        int[][] dp = new int[n][m];
        for(int[] i : dp)
            Arrays.fill(i, -1);
        return sumPath(n - 1, m - 1, grid, dp);
    }
    
    public static int sumPath(int i, int j, int[][] grid, int[][] dp) {
        if(i == 0 && j == 0)
            return grid[i][j];
        if(i < 0 || j < 0)
            return (int)1e9;
        if(dp[i][j] != -1)
            return dp[i][j];
        int up = grid[i][j] + sumPath(i - 1, j, grid, dp);
        int left = grid[i][j] + sumPath(i, j - 1, grid, dp);
        return dp[i][j] = Math.min(up, left);
    }
}

/*
Tabulation :
TC : O(n * m)
SC : O(n * m)
*/

public class Solution {
    public static int minSumPath(int[][] grid) {
    	int n = grid.length;
        int m = grid[0].length;
        int[][] dp = new int[n][m];
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(i == 0 && j == 0)
                    dp[i][j] = grid[i][j];
                else {
                    int up = grid[i][j];
                    int left = grid[i][j];
                    if(i > 0)
                        up += dp[i - 1][j];
                    else 
                        up = (int)1e9;
                    if(j > 0)
                        left += dp[i][j - 1];
                    else
                        left = (int)1e9;
                    dp[i][j] = Math.min(left, up);
                }
            }
        }
        return dp[n - 1][m - 1];
    }
}

/*
Space Optimization :
TC : O(n * m)
SC : O(m)
*/

public class Solution {
    public static int minSumPath(int[][] grid) {
    	int n = grid.length;
        int m = grid[0].length;
        int[] dp = new int[m];
        for(int i = 0; i < n; i++) {
            int[] temp = new int[m];
            for(int j = 0; j < m; j++) {
                if(i == 0 && j == 0)
                    temp[j] = grid[i][j];
                else {
                    int up = grid[i][j];
                    int left = grid[i][j];
                    if(i > 0)
                        up += dp[j];
                    else 
                        up = (int)1e9;
                    if(j > 0)
                        left += temp[j - 1];
                    else
                        left = (int)1e9;
                    temp[j] = Math.min(left, up);
                }
            }
            dp = temp.clone();
        }
        return dp[m - 1];
    }
}