class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        int[] indegree = new int[V];
        for(ArrayList<Integer> list : adj) {
            for(int i : list) {
                indegree[i]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for(int i = 0; i < V; i++) {
            if(indegree[i] == 0) {
                q.offer(i);
            }
        }
        int count = 0;
        while(!q.isEmpty()) {
            int current = q.poll();
            count++;
            for(int j : adj.get(current)) {
                indegree[j]--;
                if(indegree[j] == 0) {
                    q.offer(j);
                }
            }
        }
        
        return count != V; // if count == V then topo sort happen which occurs in Acyclic Graph
    }
}

//TC : O(V + E)
//SC : O(V)(queue) + O(V)(indegree) = O(V)