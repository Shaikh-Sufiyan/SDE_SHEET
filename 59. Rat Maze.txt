class Solution {
    public static ArrayList<String> findPath(int[][] m, int n) {
        ArrayList<String> ans = new ArrayList<>();
        int[] di = new int[]{+1,0,0,-1};
        int[] dj = new int[]{0,-1,+1,0};
        int[][] visited = new int[n][n];
        if(m[0][0] == 1)
            solve(ans,"",0,0,m,n,di,dj,visited);
        return ans;
    } 
    
    public static void solve(ArrayList<String> ans, String move, int i, int j, int[][] m, int n, int[] di, int[] dj, int[][] visited) {
        if(i == n - 1 && j == n - 1) {
            ans.add(move);
            return;
        }
        String dir = "DLRU";
        for(int k = 0; k < 4; k++) {
            int nexti = i + di[k];
            int nextj = j + dj[k];
            if(nexti >= 0 && nextj >= 0 && nexti < n && nextj < n && m[nexti][nextj] == 1 && visited[nexti][nextj] == 0) {
                visited[i][j] = 1;
                //move += dir.charAt(k);
                solve(ans,move + dir.charAt(k),nexti,nextj,m,n,di,dj,visited);
                //move -= dir.charAt(k);
                visited[i][j] = 0;
            }
        }
    }
}