/*
Definition :
A vertex in an undirected connected graph is an articulation point (or cut vertex) if removing it (and edges through it) disconnects the graph. 
Articulation points represent vulnerabilities in a connected network â€“ single points whose failure would split the network into 2 or more components. 
They are useful for designing reliable networks. 
For a disconnected undirected graph, an articulation point is a vertex removing which increases number of connected components.
*/
class Solution
{
    //Function to return Breadth First Traversal of given graph.
    public ArrayList<Integer> articulationPoints(int V,ArrayList<ArrayList<Integer>> adj)
    {
        ArrayList<Integer> result = new ArrayList<>();
        boolean[] visited = new boolean[V];
        int[] tin = new int[V];
        int[] low = new int[V];
        int timer = 0;
        for(int i = 0; i < V; i++) {
            if(!visited[i]) {
                findArticulationPoints(i, -1, visited, tin, low, timer, adj, result);
            }
        }
        Collections.sort(result);
        if(result.size() == 0) { //if no articualtion point then need to return -1
            result.add(-1);
        }
        return result;
    }
    
    public void findArticulationPoints(int node, int parent, boolean[] visited, int[] tin, int[] low, int timer, ArrayList<ArrayList<Integer>> adj, ArrayList<Integer> result) {
        visited[node] = true;
        tin[node] = low[node] = timer++;
        int child = 0;
        for(int j : adj.get(node)) {
            if(j == parent)
                continue;
            if(!visited[j]) {
                findArticulationPoints(j, node, visited, tin, low, timer, adj, result);
                low[node] = Math.min(low[node], low[j]);
                if(low[j] >= tin[node] && parent != -1) { // >= because here we are concern with vertex not edge as of bridge
                    if(!result.contains(node))
                        result.add(node);
                }
                child++;
            }
            else {
                low[node] = Math.min(low[node], tin[j]);
            }
        }
        if(child > 1 && parent == -1) { // more than 1 individual child then node can be articulation point
            if(!result.contains(node))
                result.add(node);
        }
    }
}

//TC : O(V + E)
//SC : O(V)