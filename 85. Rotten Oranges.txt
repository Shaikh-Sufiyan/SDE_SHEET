class Solution {
    public int orangesRotting(int[][] grid) {
        int fresh = 0;
        Queue<int[]> q = new LinkedList<>();
        for(int  i = 0; i < grid.length; i++) {
            for(int j = 0; j < grid[i].length; j++) {
                if(grid[i][j] == 1)
                    fresh++;
                if(grid[i][j] == 2)
                    q.offer(new int[]{i , j});
            }
        }
        int[][] directions = {{0,1}, {0,-1} , {1,0}, {-1,0}};
        int minute = 0;
        while(!q.isEmpty() && fresh > 0) {
            int n = q.size();
            minute++;
            while(n-- > 0) {
                int[] current = q.poll();
                for(int[] direction : directions) {
                    int i = current[0] + direction[0];
                    int j = current[1] + direction[1];
                    if(i < 0 || j < 0 || i >= grid.length || j >= grid[i].length || grid[i][j] == 2 || grid[i][j] == 0)
                        continue;
                    grid[i][j] = 2;
                    q.offer(new int[]{i , j});
                    fresh--;
                }
            }
        }
        return fresh == 0 ? minute : -1;
    }
}