/*
Memoization 
TC : O(n * m * m) * 9
SC : O(n * m * m) + O(n)(RecStack)
*/

import java.util.*;
public class Solution {
	public static int maximumChocolates(int r, int c, int[][] grid) {
        int[][][] dp = new int[r][c][c];
        for(int[][] i : dp)
            for(int[] j : i)
                Arrays.fill(j, -1);
		return calculate(0, 0, c - 1, r, c, grid, dp);
	}
    
    public static int calculate(int i, int j1, int j2, int r, int c, int[][] grid, int[][][] dp) {
        if(j1 < 0 || j1 >= c || j2 < 0 || j2 >= c)
            return (int)-1e8;
        if(i == r - 1) {
            if(j1 == j2)
                return grid[i][j1];
            else 
                return grid[i][j1] + grid[i][j2];
        }
        if(dp[i][j1][j2] != -1)
            return dp[i][j1][j2];
            
        int max = Integer.MIN_VALUE;
        //for all 9 path
        for(int d1 = -1; d1 <= +1; d1++) {
            for(int d2 = -1; d2 <= +1; d2++) {
                int value = 0;
                value = j1 == j2 ? grid[i][j1] : grid[i][j1] + grid[i][j2];
                value += calculate(i + 1, j1 + d1, j2 + d2, r, c, grid, dp);
                max = Math.max(max, value);
            }
        }
        return dp[i][j1][j2] = max;
    }
}

/*
Tabulation :
TC : O(n * m * m) * 9
SC : O(n * m * m)
*/

public class Solution {
	public static int maximumChocolates(int n, int m, int[][] grid) {
		int[][][] dp = new int[n][m][m];
        for(int j1 = 0; j1 < m; j1++) {
            for(int j2 = 0; j2 < m; j2++) {
                dp[n - 1][j1][j2] = j1 == j2 ? grid[n - 1][j1] : grid[n - 1][j1] + grid[n - 1][j2];
            }
        }
        for(int i = n - 2; i >= 0; i--) {
            for(int j1 = 0; j1 < m; j1++) {
                for(int j2 = 0; j2 < m; j2++) {
                    int max = Integer.MIN_VALUE;
        //for all 9 path
                    for(int d1 = -1; d1 <= +1; d1++) {
                        for(int d2 = -1; d2 <= +1; d2++) {
                            int value = 0;
                            value = j1 == j2 ? grid[i][j1] : grid[i][j1] + grid[i][j2];
                            if(j1 + d1 >= 0 && j1 + d1 < m && j2 + d2 >= 0 && j2 + d2 < m)
                                value += dp[i + 1][j1 + d1][j2 + d2];
                            else 
                                value += (int)-1e8;
                            max = Math.max(max, value);
                           
                        }
                    }
                     dp[i][j1][j2] = max;
                }
            }
        }
        return dp[0][0][m - 1];
	}
}

/*
Space Optimization 
TC : O(n * m * m) * 9
SC : O(m * m) 
*/

public class Solution {
	public static int maximumChocolates(int n, int m, int[][] grid) {
		int[][] dp = new int[m][m];
        for(int j1 = 0; j1 < m; j1++) {
            for(int j2 = 0; j2 < m; j2++) {
                dp[j1][j2] = j1 == j2 ? grid[n - 1][j1] : grid[n - 1][j1] + grid[n - 1][j2];
            }
        }
        for(int i = n - 2; i >= 0; i--) {
            int[][] temp = new int[m][m];
            for(int j1 = 0; j1 < m; j1++) {
                for(int j2 = 0; j2 < m; j2++) {
                    int max = Integer.MIN_VALUE;
                    
        //for all 9 path
                    for(int d1 = -1; d1 <= +1; d1++) {
                        for(int d2 = -1; d2 <= +1; d2++) {
                            int value = 0;
                            value = j1 == j2 ? grid[i][j1] : grid[i][j1] + grid[i][j2];
                            if(j1 + d1 >= 0 && j1 + d1 < m && j2 + d2 >= 0 && j2 + d2 < m)
                                value += dp[j1 + d1][j2 + d2];
                            else 
                                value += (int)-1e8;
                            max = Math.max(max, value);
                           
                        }
                    }
                     temp[j1][j2] = max;
                }
            }
            dp = temp.clone();
        }
        return dp[0][m - 1];
	}
}
