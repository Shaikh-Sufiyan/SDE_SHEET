Brute Force :
class Solution
{
    //Function to find sum of weights of edges of the Minimum Spanning Tree.
    static int spanningTree(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj) 
    {
        int[] dist = new int[V];
        boolean[] inMST = new boolean[V];
        int[] parent = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        Arrays.fill(parent, -1);
        Arrays.fill(inMST, false);
        dist[0] = 0;
        for(int i = 0; i < V - 1; i++) {
            int u = findMin(inMST, dist);
            inMST[u] = true;
            for(ArrayList<Integer> list : adj.get(u)) {
                int v = list.get(0);
                int weight = list.get(1);
		//Here, we will only take weight not weight + dist[u] because we don't want dist from a fixed source hence we will not add previous dist value as done in Single Source Algorithm)
                if(!inMST[v] && dist[v] > weight) {
                    dist[v] = weight;
                    parent[v] = u;
                }
            }
        }
        int sum = 0;
        for(int i : dist) {
            sum += i;
        }
        return sum;
    }
    
    public static int findMin(boolean[] inMST, int[] dist) {
        int min = Integer.MAX_VALUE;
        int index = -1;
        for(int i = 0; i < dist.length; i++) {
            if(!inMST[i] && dist[i] < min) {
                min = dist[i];
                index = i;
            }
        }
        return index;
    }
}

//TC : O(V^2)
//SC : O(V)

Optimal : Same Method used for Dijkshtra's Algorithm

class Solution
{
    static class Pair {
        int node;
        int weight;
        public Pair(int node, int weight) {
            this.node = node;
            this.weight = weight;
        }
    }
    static int spanningTree(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj) 
    {
        int[] dist = new int[V];
        boolean[] inMST = new boolean[V];
        int[] parent = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        Arrays.fill(inMST, false);
        Arrays.fill(parent, -1);
        PriorityQueue<Pair> q = new PriorityQueue<>((a, b) -> a.weight - b.weight);
        dist[0] = 0;
        inMST[0] = true;
        q.offer(new Pair(0, 0));
        while(!q.isEmpty()) {
            Pair current = q.poll();
            int u = current.node;
            inMST[u] = true;
            for(ArrayList<Integer> list : adj.get(u)) {
                int v = list.get(0);
                int weight = list.get(1);
                if(!inMST[v] && dist[v] > weight) {
                    dist[v] = weight;
                    parent[v] = u;
                    q.offer(new Pair(v, weight));
                }
            }
        }
        int sum = 0;
        for(int i : dist) {
            sum += i;
        }
        return sum;
    }
}

//TC : O(VlogV)
//SC : O(V)
