/**********************************************************	
	
	Following is the representation of Binary Tree Node:
 	
 	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;
		
		public BinaryTreeNode(T data) {
			this.data = data;
		}
	}

*********************************************************/
import java.util.*;

public class Solution
{
public static int timeToBurnTree(BinaryTreeNode<Integer> root, int start)
    {
        HashMap<BinaryTreeNode, BinaryTreeNode> map = new HashMap<>();
        findParent(root, map);
        HashMap<BinaryTreeNode, Boolean> visited = new HashMap<>();
        int dist = 0;
        Queue<BinaryTreeNode> q = new LinkedList<>();
    	BinaryTreeNode target = search(root, start);
        q.offer(target);
        visited.put(target, true);
        while(!q.isEmpty()) {
            int n = q.size();
            for(int i = 0; i < n; i++) {
                BinaryTreeNode current = q.poll();
                if(current.left != null && visited.get(current.left) == null) {
                    q.offer(current.left);
                    visited.put(current.left, true);
                }
                if(current.right != null && visited.get(current.right) == null) {
                    q.offer(current.right);
                    visited.put(current.right, true);
                }
                if(map.get(current) != null && visited.get(map.get(current)) == null) {
                    q.offer(map.get(current));
                    visited.put(map.get(current), true);
                }
            }
            dist++;
        }
    return dist - 1; 
    // At last level it won't burn anyone since all above node is burn and 
    //since leaf node no left or right child to burn. 
    //Hence returning dist-1
    }
    
    public static void findParent(BinaryTreeNode root, HashMap<BinaryTreeNode, BinaryTreeNode> map) {
        Queue<BinaryTreeNode> q = new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()) {
            BinaryTreeNode current = q.poll();
            if(current.left != null) {
                q.offer(current.left);
                map.put(current.left, current);
            }
            if(current.right != null) {
                q.offer(current.right);
                map.put(current.right, current);
            }
        }
    }
    
    public static BinaryTreeNode<Integer> search(BinaryTreeNode<Integer> root, int start) {
        Queue<BinaryTreeNode<Integer>> q = new LinkedList<>();
        BinaryTreeNode<Integer> res = null;
        q.offer(root);
        while(!q.isEmpty()) {
            BinaryTreeNode<Integer> current = q.poll();
            if(current.data == start)
                res = current;
            if(current.left != null)
                q.offer(current.left);
            if(current.right != null)
                q.offer(current.right);
        }
        return res;
    }
}