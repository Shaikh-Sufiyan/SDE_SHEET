/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        if(head == null)
            return head;
        Node current = head;
        while(current != null) {
            Node temp = new Node(current.val);
            temp.next = current.next;
            current.next = temp;
            current = temp.next;
        }
        current = head;
        while(current != null) {
            current.next.random = current.random != null ? current.random.next : null;
            current = current.next.next;
        }
        Node original = head;
        Node copy = head.next;
        Node copyhead = copy;
        while(original != null && copy != null) {
            original.next = original.next != null ? original.next.next : null;
            copy.next = copy.next != null ? copy.next.next : null;
            original = original.next;
            copy = copy.next;
        }
        return copyhead;
    }
}