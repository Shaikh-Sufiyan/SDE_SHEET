import java.util.ArrayList;
import java.util.*;
public class Solution {
    public static ArrayList<Integer> maxXorQueries(ArrayList<Integer> arr, ArrayList<ArrayList<Integer>> queries) {
        Collections.sort(arr);
        ArrayList<ArrayList<Integer>> offlineQueries = new ArrayList<>();
        int n = arr.size();
        int m = queries.size();
        for(int i = 0; i < queries.size(); i++) {
            ArrayList<Integer> temp = new ArrayList<>();
            temp.add(queries.get(i).get(0)); 
            temp.add(queries.get(i).get(1));
            temp.add(i);
            offlineQueries.add(temp);
        }
        Collections.sort(offlineQueries, new Comparator<ArrayList<Integer>> () {
            @Override
            public int compare(ArrayList<Integer> a, ArrayList<Integer> b) {
                if(a.get(1) < b.get(1)) {
                    return -1;
                }
                else if(a.get(1) > b.get(1)) {
                    return 1;
                }
                else
                    return 0;
            }
        });
        ArrayList<Integer> result = new ArrayList<>();
        for(int i = 0; i < queries.size(); i++) {
            result.add(-1);
        }
        Trie obj = new Trie();
        int ind = 0;
        for(int i = 0; i < m; i++) {
            int x = offlineQueries.get(i).get(0);
            int a = offlineQueries.get(i).get(1);
            int actual_index = offlineQueries.get(i).get(2);
            while(ind < n && arr.get(ind) <= a) {
                 obj.insert(arr.get(ind)); 
                 ind++; 
            }
            if(ind != 0) { //If every element is greater, trie is empty
                int max = obj.maxVal(x);
                result.set(actual_index, max);
            } 
        }
        return result;
        
    }
}

class Trie {
    class TrieNode {
        TrieNode[] children;
        public TrieNode() {
            children = new TrieNode[2];
        }
        public boolean containsKey(int bit) {
            return children[bit] != null;
        }
        public TrieNode getNode(int bit) {
            return children[bit];
        }
        public void putNode(int bit, TrieNode node) {
            children[bit] = node;
        }
    }
    final TrieNode root;
    public Trie() {
        root = new TrieNode();
    }
    public void insert(int num) {
        TrieNode current = root;
        for(int i = 31; i >= 0; i--) {
            int bit = (num >> i) & 1;
            if(!current.containsKey(bit)) {
                current.putNode(bit, new TrieNode());
            }
            current = current.getNode(bit);
        }
    }
    
    public int maxVal(int num) {
        TrieNode current = root;
        int maxVal = 0;
        for(int i = 31; i >= 0; i--) {
			int bit = (num >> i) & 1;
            if(current.containsKey(1 - bit)) {
                maxVal = maxVal | (1 << i);
                current = current.getNode(1 - bit);
            }
            else {
                current = current.getNode(bit);
            }
        }
        return maxVal;
    }
}
//TC : O(Q + N)(logic) + O(QlogQ)(sorting queries w.r.t array element) + O(NlogN)(sorting array) 