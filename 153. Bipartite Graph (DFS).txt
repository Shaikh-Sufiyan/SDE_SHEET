class Solution
{
    public boolean isBipartite(int V, ArrayList<ArrayList<Integer>>adj)
    {
        int[] color = new int[V];
        Arrays.fill(color, -1);
        for(int i = 0; i < V; i++) {
            if(color[i] == -1) {
                if(!checkBipartite(i, color, adj)) {
                    return false;
                }
            }
        }
        return true;
    }
    
    public static boolean checkBipartite(int i, int[] color, ArrayList<ArrayList<Integer>> adj) {
        if(color[i] == -1) {
            color[i] = 1;
        }
        for(int j : adj.get(i)) {
            if(color[j] == -1) {
                color[j] = color[i] ^ 1;
                if(!checkBipartite(j, color, adj)) {
                    return false;
                }
            }
            else if(color[j] == color[i]) {
                return false;
            }
        }
        return true;
    }
}

//TC : O(V + E)
//SC : O(V)(recursion stack) + O(V)(color) = O(V)